Swiping and Audio Popup Player main.js code

===s===each project has its own track triggered by play button (232 to 593)======
document.addEventListener('DOMContentLoaded', () => {
  const urlParams = new URLSearchParams(window.location.search);
  const project = urlParams.get('project');

  let slideIndex = 0;
  switch (project) {
    case 'mayat': slideIndex = 0; break;
    case 'tinyfighter': slideIndex = 1; break;
    case 'thefish': slideIndex = 2; break;
    case 'et-un-nouveau-depart': slideIndex = 3; break;
    case 'the-autumn-stream': slideIndex = 4; break;
    case 'into-the-wild-wild-west': slideIndex = 5; break;
    case 'their-most-reverenced': slideIndex = 6; break;
    case 'cyberwinter-race': slideIndex = 7; break;
    case 'leaving-in-reminiscence': slideIndex = 8; break;
    case 'journey-to-the-west': slideIndex = 9; break;
    case 'la-tragedie-epique': slideIndex = 10; break;
    case 'mut1201-composition': slideIndex = 11; break;
    case 'jumala': slideIndex = 12; break;
    default: slideIndex = 0; // Default to the first slide if no match
  }

  const swiper = new Swiper('.swiper', {
    loop: false,
    speed: 600,
    autoplay: {
      delay: 300000, // 5min, 1000=1s
    },
    slidesPerView: 1,
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    initialSlide: slideIndex,
  });

  const audioPlayer = new Audio();
  const albumImage = document.getElementById('album-image');
  const trackTitle = document.getElementById('track-title');
  const projectNameElement = document.getElementById('popup-project-name');
  const popupPlayer = document.getElementById('audio-popup-player');
  const playPauseBtn = document.getElementById('play-pause');
  const minimizeButton = document.getElementById('minimize-button');
  const openAudioPopupBtn = document.getElementById('open-audio-popup');
  const currentTimeElem = document.getElementById('current-time');
  const totalTimeElem = document.getElementById('total-time');
  const progressBar = document.querySelector('.progress-bar');
  const progress = document.querySelector('.progress');
  const volumeSlider = document.getElementById('volume-slider');

  let isPlaying = false;
  let currentAudioSrc = ''; // Global state to track the currently playing audio

  function updateProjectDetails(index) {
    const activeSlide = swiper.slides[index];
    const projectUrl = activeSlide.getAttribute('data-url');
    const title = activeSlide.getAttribute('data-title');
    const category = activeSlide.getAttribute('data-category');
    const date = activeSlide.getAttribute('data-date');
    const description = activeSlide.getAttribute('data-description');
    const audio = activeSlide.getAttribute('data-audio');
    const video = activeSlide.getAttribute('data-video');
    const galleryImages = activeSlide.getAttribute('data-gallery-images');
    const galleryCaptions = activeSlide.getAttribute('data-gallery-captions');


    // Update the URL without reloading the page
    if (projectUrl) {
        const newUrl = projectUrl;
        window.history.pushState({ path: newUrl }, '', newUrl);
    }

    // Update project details
    const projectTitle = document.getElementById('project-title');
    const projectInfoCategory = document.querySelector('#project-info li:nth-of-type(1)');
    const projectInfoDate = document.querySelector('#project-info li:nth-of-type(2)');
    const projectDescription = document.getElementById('project-description');
    const audioSection = document.querySelector('.audio-section');
    const embedSection = document.querySelector('.embed-section');

    if (projectTitle) projectTitle.textContent = title;
    if (projectInfoCategory) projectInfoCategory.innerHTML = `<strong>Category</strong>: ${category}`;
    if (projectInfoDate) projectInfoDate.innerHTML = `<strong>Project Date</strong>: ${date}`;
    if (projectDescription) projectDescription.textContent = description;

    if (video) {
      if (embedSection) {
        embedSection.style.display = 'block';
        if (embedSection.querySelector('iframe')) {
          embedSection.querySelector('iframe').src = video;
        }
      }
      if (audioSection) audioSection.style.display = 'none'; // Hide audio if video is present
    } else if (audio) {
      if (audioSection) {
        audioSection.style.display = 'block';
        if (audioSection.querySelector('audio source')) {
          audioSection.querySelector('audio source').src = audio;
        }
      }
      if (embedSection) embedSection.style.display = 'none'; // Hide video if audio is present
    } else {
      if (audioSection) audioSection.style.display = 'none';
      if (embedSection) embedSection.style.display = 'none';
    }

    // Handle Small Gallery
    const smallGallery = document.querySelector('.small-swiper-gallery');
    const swiperWrapper = smallGallery.querySelector('.swiper-wrapper');

    // Check if galleryImages exist and if there are valid images
    if (galleryImages && galleryImages.trim() !== '') {
      const images = galleryImages.split(','); // Assume images are comma-separated
      const captions = galleryCaptions ? galleryCaptions.split(',') : [];

      // Clear previous images to avoid duplication
      swiperWrapper.innerHTML = '';

      if (images.length > 1) { // Ensure there are multiple images before showing the gallery
        // Inject new images with captions
        images.forEach((imgSrc, index) => {
          const slideDiv = document.createElement('div');
          slideDiv.className = 'swiper-slide';
          slideDiv.innerHTML = `
            <img src="${imgSrc}" alt="Gallery Image" class="gallery-image">
            ${captions[index] ? `<div class="swiper-caption">${captions[index]}</div>` : ''}
          `;
          swiperWrapper.appendChild(slideDiv);
        });

        // Show the gallery since there are multiple images
        smallGallery.style.display = 'block';

        // Check if Swiper is already initialized and destroy it if so
        if (typeof smallGallerySwiper !== 'undefined' && smallGallerySwiper !== null) {
          smallGallerySwiper.destroy(); // Destroy the previous Swiper instance
        }

        // Re-initialize the Swiper instance with new settings
        smallGallerySwiper = new Swiper('.small-swiper-gallery', {
          loop: true,
          speed: 600,
          slidesPerView: 1, // Show one image at a time
          spaceBetween: 10,
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          pagination: {
            el: '.swiper-pagination',
            clickable: true,
          },
        });

        // Add click event listener for zoom-in functionality
        const galleryImages = document.querySelectorAll('.gallery-image');
        galleryImages.forEach(image => {
          image.addEventListener('click', () => {
            openImageZoom(image.src);
          });
        });

      } else {
        // Hide the gallery if no multiple images are present
        smallGallery.style.display = 'none';
      }
    } else {
      // Hide the gallery if galleryImages is null or undefined
      smallGallery.style.display = 'none';
    }
  }

  // Zoom-in functionality
  function openImageZoom(src) {
    const modal = document.createElement('div');
    modal.id = 'image-zoom-modal';
    modal.innerHTML = `
      <span class="close">&times;</span>
      <img src="${src}" alt="Zoomed Image">
    `;
    document.body.appendChild(modal);

    modal.style.display = 'flex';

    // Close modal on click of close button
    modal.querySelector('.close').addEventListener('click', () => {
      document.body.removeChild(modal);
    });

    // Close modal on click outside the image
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }

  // First Audio Player Code: Initialize the project details based on the initial slide index
  updateProjectDetails(slideIndex);
  updateAudioPlayer(slideIndex);

  function updateAudioPlayer(index) {
    const activeSlide = swiper.slides[index];
    const audioSrc = activeSlide.getAttribute('data-audio');
    const title = activeSlide.getAttribute('data-title');
    const project = activeSlide.getAttribute('data-client');
    const imageSrc = activeSlide.querySelector('img') ? activeSlide.querySelector('img').src : '';

    if (audioSrc && audioSrc !== currentAudioSrc) { // Only update if it's a new audio source
      audioPlayer.src = audioSrc;
      currentAudioSrc = audioSrc;

      if (trackTitle) trackTitle.textContent = title;
      if (projectNameElement) projectNameElement.textContent = project;
      if (albumImage) albumImage.src = imageSrc;

      audioPlayer.load();
      audioPlayer.play();
    }
  }

  swiper.on('slideChange', () => {
    const realIndex = swiper.realIndex; 
    updateProjectDetails(swiper.realIndex);
    // Do not call updateAudioPlayer here to keep the current track playing
  });

  // Initialize the project details and audio player based on the initial slide index
  updateProjectDetails(slideIndex);
  updateAudioPlayer(slideIndex);

  // Back to Main Page from Details Page
  document.querySelector('.btn-back-to-portfolio').addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default link behavior
    window.location.href = 'index.html#portfolio'; // Navigate to portfolio page
  });

  // Open the popup player
  if (openAudioPopupBtn) {
    openAudioPopupBtn.addEventListener('click', () => {
      const currentSlide = document.querySelector('.swiper-slide-active');
      if (!currentSlide) {
        console.error('No active slide found.');
        return;
      }

      const audioSrc = currentSlide.getAttribute('data-audio');
      const title = currentSlide.getAttribute('data-title');
      const project = currentSlide.getAttribute('data-client');
      const imageSrc = currentSlide.querySelector('img') ? currentSlide.querySelector('img').src : '';

      if (audioSrc && audioSrc !== currentAudioSrc) { // Only change if it's a new audio source
        audioPlayer.src = audioSrc;
        currentAudioSrc = audioSrc;

        if (trackTitle) trackTitle.textContent = title;
        if (projectNameElement) projectNameElement.textContent = project;
        if (albumImage) albumImage.src = imageSrc;

        audioPlayer.load();
        audioPlayer.play();
      } else {
        audioPlayer.play(); // Resume playback if already playing the current audio
      }

      if (popupPlayer) {
        popupPlayer.classList.add('active');
        popupPlayer.classList.remove('minimized');
      }

      if (minimizeButton) {
        minimizeButton.classList.remove('minimized');
      }
    });
  }

  // Minimize the popup player
  if (minimizeButton) {
    minimizeButton.addEventListener('click', () => {
      if (popupPlayer) {
        popupPlayer.classList.toggle('minimized');
      }
      minimizeButton.classList.toggle('minimized');
    });
  }

  // Play or pause audio
  if (playPauseBtn) {
    playPauseBtn.addEventListener('click', () => {
      if (isPlaying) {
        audioPlayer.pause();
      } else {
        audioPlayer.play();
      }
    });
  }

  // Event listeners for the audio player
  audioPlayer.addEventListener('play', () => {
    isPlaying = true;
    if (playPauseBtn) {
      playPauseBtn.querySelector('.play-icon').style.display = 'none';
      playPauseBtn.querySelector('.pause-icon').style.display = 'inline';
    }
  });

  audioPlayer.addEventListener('pause', () => {
    isPlaying = false;
    if (playPauseBtn) {
      playPauseBtn.querySelector('.play-icon').style.display = 'inline';
      playPauseBtn.querySelector('.pause-icon').style.display = 'none';
    }
  });

  audioPlayer.addEventListener('timeupdate', () => {
    const currentTime = audioPlayer.currentTime;
    const duration = audioPlayer.duration;
    updateTimeDisplay(currentTime, duration);
    updateProgress(currentTime, duration);
  });

  if (progressBar) {
    progressBar.addEventListener('click', (e) => {
      const progressBarWidth = progressBar.offsetWidth;
      const clickX = e.offsetX;
      const duration = audioPlayer.duration;
      audioPlayer.currentTime = (clickX / progressBarWidth) * duration;
    });
  }

  if (volumeSlider) {
    volumeSlider.addEventListener('input', (e) => {
      audioPlayer.volume = e.target.value;
    });
  }

  function updateTimeDisplay(currentTime, duration) {
    if (currentTimeElem && totalTimeElem) {
      currentTimeElem.textContent = formatTime(currentTime);
      totalTimeElem.textContent = formatTime(duration);
    }
  }

  function updateProgress(currentTime, duration) {
    if (progress) {
      const progressPercent = (currentTime / duration) * 100;
      progress.style.width = `${progressPercent}%`;
    }
  }

  function formatTime(time) {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  }

}); 

===s===same track throughout all projects======
document.addEventListener('DOMContentLoaded', () => {
  const urlParams = new URLSearchParams(window.location.search);
  const project = urlParams.get('project');

  let slideIndex = 0;
  switch (project) {
    case 'mayat':
      slideIndex = 0;
      break;
    case 'tinyfighter':
      slideIndex = 1;
      break;
    case 'thefish':
      slideIndex = 2;
      break;
    case 'et-un-nouveau-depart':
      slideIndex = 3;
      break;
    case 'the-autumn-stream':
      slideIndex = 4;
      break;
    case 'into-the-wild-wild-west':
      slideIndex = 5;
      break;
    case 'their-most-reverenced':
      slideIndex = 6;
      break;
    case 'cyberwinter-race':
      slideIndex = 7;
      break;
    case 'leaving-in-reminiscence':
      slideIndex = 8;
      break;
    case 'journey-to-the-west':
      slideIndex = 9;
      break;
    case 'la-tragedie-epique':
      slideIndex = 10;
      break;
    default:
      slideIndex = 0; // Default to the first slide if no match
  }

  const swiper = new Swiper('.swiper', {
    loop: true,
    speed: 600,
    autoplay: {
      delay: 300000, // 5min, 1000=1s
    },
    slidesPerView: 1,
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    initialSlide: slideIndex,
  });

  function updateProjectDetails(index) {
    const activeSlide = swiper.slides[index];
    const projectUrl = activeSlide.getAttribute('data-url');

    // Update the URL without reloading the page
    if (projectUrl) {
        const newUrl = projectUrl;
        window.history.pushState({ path: newUrl }, '', newUrl);
    }

    // Continue updating other project details...
    const title = activeSlide.getAttribute('data-title');
    const category = activeSlide.getAttribute('data-category');
    const date = activeSlide.getAttribute('data-date');
    const description = activeSlide.getAttribute('data-description');
    const audio = activeSlide.getAttribute('data-audio');
    const video = activeSlide.getAttribute('data-video');

    document.getElementById('project-title').textContent = title;
    document.querySelector('#project-info li:nth-of-type(1)').innerHTML = `<strong>Category</strong>: ${category}`;
    document.querySelector('#project-info li:nth-of-type(2)').innerHTML = `<strong>Project Date</strong>: ${date}`;
    document.getElementById('project-description').textContent = description;

    const audioSection = document.querySelector('.audio-section');
    const embedSection = document.querySelector('.embed-section');

    // Stop and reset the audio player
    audioPlayer.pause();
    audioPlayer.currentTime = 0;

    if (video) {
        embedSection.style.display = 'block';
        embedSection.querySelector('iframe').src = video;
        audioSection.style.display = 'none'; // Hide audio if video is present
    } else if (audio) {
        audioSection.style.display = 'block';
        audioSection.querySelector('audio source').src = audio;
        audioPlayer.load();
        embedSection.style.display = 'none'; // Hide video if audio is present
    } else {
        audioSection.style.display = 'none';
        embedSection.style.display = 'none';
    }
  }

  // Update the audio player when slide changes
  function updateAudioPlayer(index) {
    const activeSlide = swiper.slides[index];
    const audioSrc = activeSlide.getAttribute('data-audio');
    const title = activeSlide.getAttribute('data-title');
    const project = activeSlide.getAttribute('data-client');
    const imageSrc = activeSlide.querySelector('img').src;

    if (audioSrc) {
      audioPlayer.src = audioSrc;

      trackTitle.textContent = title;
      projectNameElement.textContent = project;
      albumImage.src = imageSrc;

      audioPlayer.load(); // Load the new audio
    } else {
      console.log('No audio available for this slide.');
    }
  }

  swiper.on('slideChange', () => {
    updateProjectDetails(swiper.realIndex);
    updateAudioPlayer(swiper.realIndex); // Update the audio player
  });

  // Initialize the project details and audio player based on the initial slide index
  updateProjectDetails(slideIndex);
  updateAudioPlayer(slideIndex);
});


// Back to Main Page from Details Page
document.querySelector('.btn-back-to-portfolio').addEventListener('click', (event) => {
  event.preventDefault(); // Prevent default link behavior
  window.location.href = 'index.html#portfolio'; // Navigate to portfolio page
});

// Audio Popup Player
document.addEventListener('DOMContentLoaded', () => {
  const audioPlayer = new Audio(); // Create a new audio object
  const albumImage = document.getElementById('album-image');
  const trackTitle = document.getElementById('track-title');
  const projectNameElement = document.getElementById('popup-project-name');
  const popupPlayer = document.getElementById('audio-popup-player');
  const playPauseBtn = document.getElementById('play-pause');
  const minimizeButton = document.getElementById('minimize-button');
  const openAudioPopupBtn = document.getElementById('open-audio-popup');
  const currentTimeElem = document.getElementById('current-time');
  const totalTimeElem = document.getElementById('total-time');
  const progressBar = document.querySelector('.progress-bar');
  const progress = document.querySelector('.progress');
  const volumeSlider = document.getElementById('volume-slider');

  let isPlaying = false;

  // Open the popup player
  openAudioPopupBtn.addEventListener('click', () => {
    const currentSlide = document.querySelector('.swiper-slide-active');
    if (!currentSlide) {
      console.error('No active slide found.');
      return;
    }

    const audioSrc = currentSlide.getAttribute('data-audio');
    const title = currentSlide.getAttribute('data-title');
    const project = currentSlide.getAttribute('data-client');
    const imageSrc = currentSlide.querySelector('img').src;

    if (audioSrc) {
      audioPlayer.src = audioSrc;

      trackTitle.textContent = title;
      projectNameElement.textContent = project;
      albumImage.src = imageSrc;

      audioPlayer.load();
      audioPlayer.play();

      popupPlayer.classList.add('active');
      popupPlayer.classList.remove('minimized');
      minimizeButton.classList.remove('minimized');
    } else {
      console.log('No audio available for this slide.');
    }
  });

  // Minimize the popup player
  minimizeButton.addEventListener('click', () => {
    popupPlayer.classList.toggle('minimized');
    minimizeButton.classList.toggle('minimized');
  });

  // Play or pause audio
  playPauseBtn.addEventListener('click', () => {
    if (isPlaying) {
      audioPlayer.pause();
    } else {
      audioPlayer.play();
    }
  });

  // Event listeners for the audio player
  audioPlayer.addEventListener('play', () => {
    isPlaying = true;
    playPauseBtn.querySelector('.play-icon').style.display = 'none';
    playPauseBtn.querySelector('.pause-icon').style.display = 'inline';
  });

  audioPlayer.addEventListener('pause', () => {
    isPlaying = false;
    playPauseBtn.querySelector('.play-icon').style.display = 'inline';
    playPauseBtn.querySelector('.pause-icon').style.display = 'none';
  });

  audioPlayer.addEventListener('timeupdate', () => {
    const currentTime = audioPlayer.currentTime;
    const duration = audioPlayer.duration;
    updateTimeDisplay(currentTime, duration);
    updateProgress(currentTime, duration);
  });

  progressBar.addEventListener('click', (e) => {
    const progressBarWidth = progressBar.offsetWidth;
    const clickX = e.offsetX;
    const duration = audioPlayer.duration;
    audioPlayer.currentTime = (clickX / progressBarWidth) * duration;
  });

  volumeSlider.addEventListener('input', (e) => {
    audioPlayer.volume = e.target.value;
  });

  function updateTimeDisplay(currentTime, duration) {
    currentTimeElem.textContent = formatTime(currentTime);
    totalTimeElem.textContent = formatTime(duration);
  }

  function updateProgress(currentTime, duration) {
    const progressPercent = (currentTime / duration) * 100;
    progress.style.width = `${progressPercent}%`;
  }

  function formatTime(time) {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  }
});

===s===change track to current project slide audio======
document.addEventListener('DOMContentLoaded', () => {
  // Initialize the Swiper
  const urlParams = new URLSearchParams(window.location.search);
  const project = urlParams.get('project');

  let slideIndex = 0;
  switch (project) {
    case 'mayat': slideIndex = 0; break;
    case 'tinyfighter': slideIndex = 1; break;
    case 'thefish': slideIndex = 2; break;
    case 'et-un-nouveau-depart': slideIndex = 3; break;
    case 'the-autumn-stream': slideIndex = 4; break;
    case 'into-the-wild-wild-west': slideIndex = 5; break;
    case 'their-most-reverenced': slideIndex = 6; break;
    case 'cyberwinter-race': slideIndex = 7; break;
    case 'leaving-in-reminiscence': slideIndex = 8; break;
    case 'journey-to-the-west': slideIndex = 9; break;
    case 'la-tragedie-epique': slideIndex = 10; break;
    default: slideIndex = 0; // Default to the first slide if no match
  }

  const swiper = new Swiper('.swiper', {
    loop: true,
    speed: 600,
    autoplay: {
      delay: 300000, // 5min, 1000=1s
    },
    slidesPerView: 1,
    pagination: {
      el: '.swiper-pagination',
      type: 'bullets',
      clickable: true,
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    initialSlide: slideIndex,
  });

  // Initialize audio player and related elements
  const audioPlayer = new Audio();
  const albumImage = document.getElementById('album-image');
  const trackTitle = document.getElementById('track-title');
  const projectNameElement = document.getElementById('popup-project-name');
  const popupPlayer = document.getElementById('audio-popup-player');
  const playPauseBtn = document.getElementById('play-pause');
  const minimizeButton = document.getElementById('minimize-button');
  const openAudioPopupBtn = document.getElementById('open-audio-popup');
  const currentTimeElem = document.getElementById('current-time');
  const totalTimeElem = document.getElementById('total-time');
  const progressBar = document.querySelector('.progress-bar');
  const progress = document.querySelector('.progress');
  const volumeSlider = document.getElementById('volume-slider');

  let isPlaying = false;

  function updateProjectDetails(index) {
    const activeSlide = swiper.slides[index];
    const projectUrl = activeSlide.getAttribute('data-url');
    const title = activeSlide.getAttribute('data-title');
    const category = activeSlide.getAttribute('data-category');
    const date = activeSlide.getAttribute('data-date');
    const description = activeSlide.getAttribute('data-description');
    const audio = activeSlide.getAttribute('data-audio');
    const video = activeSlide.getAttribute('data-video');

    // Update the URL without reloading the page
    if (projectUrl) {
        const newUrl = projectUrl;
        window.history.pushState({ path: newUrl }, '', newUrl);
    }

    // Update project details
    const projectTitle = document.getElementById('project-title');
    const projectInfoCategory = document.querySelector('#project-info li:nth-of-type(1)');
    const projectInfoDate = document.querySelector('#project-info li:nth-of-type(2)');
    const projectDescription = document.getElementById('project-description');
    const audioSection = document.querySelector('.audio-section');
    const embedSection = document.querySelector('.embed-section');

    if (projectTitle) projectTitle.textContent = title;
    if (projectInfoCategory) projectInfoCategory.innerHTML = `<strong>Category</strong>: ${category}`;
    if (projectInfoDate) projectInfoDate.innerHTML = `<strong>Project Date</strong>: ${date}`;
    if (projectDescription) projectDescription.textContent = description;

    // Stop and reset the audio player
    audioPlayer.pause();
    audioPlayer.currentTime = 0;

    if (video) {
      if (embedSection) {
        embedSection.style.display = 'block';
        if (embedSection.querySelector('iframe')) {
          embedSection.querySelector('iframe').src = video;
        }
      }
      if (audioSection) audioSection.style.display = 'none'; // Hide audio if video is present
    } else if (audio) {
      if (audioSection) {
        audioSection.style.display = 'block';
        if (audioSection.querySelector('audio source')) {
          audioSection.querySelector('audio source').src = audio;
        }
        audioPlayer.src = audio; // Ensure audio player is updated
        audioPlayer.load();
      }
      if (embedSection) embedSection.style.display = 'none'; // Hide video if audio is present
    } else {
      if (audioSection) audioSection.style.display = 'none';
      if (embedSection) embedSection.style.display = 'none';
    }
  }

  function updateAudioPlayer(index) {
    const activeSlide = swiper.slides[index];
    const audioSrc = activeSlide.getAttribute('data-audio');
    const title = activeSlide.getAttribute('data-title');
    const project = activeSlide.getAttribute('data-client');
    const imageSrc = activeSlide.querySelector('img') ? activeSlide.querySelector('img').src : '';

    if (audioSrc) {
      audioPlayer.src = audioSrc;

      if (trackTitle) trackTitle.textContent = title;
      if (projectNameElement) projectNameElement.textContent = project;
      if (albumImage) albumImage.src = imageSrc;

      audioPlayer.load();
      audioPlayer.play();
    } else {
      console.log('No audio available for this slide.');
    }
  }

  swiper.on('slideChange', () => {
    updateProjectDetails(swiper.realIndex);
    updateAudioPlayer(swiper.realIndex); // Update the audio player
  });

  // Initialize the project details and audio player based on the initial slide index
  updateProjectDetails(slideIndex);
  updateAudioPlayer(slideIndex);

  // Back to Main Page from Details Page
  document.querySelector('.btn-back-to-portfolio').addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default link behavior
    window.location.href = 'index.html#portfolio'; // Navigate to portfolio page
  });

  // Open the popup player
  if (openAudioPopupBtn) {
    openAudioPopupBtn.addEventListener('click', () => {
      const currentSlide = document.querySelector('.swiper-slide-active');
      if (!currentSlide) {
        console.error('No active slide found.');
        return;
      }

      const audioSrc = currentSlide.getAttribute('data-audio');
      const title = currentSlide.getAttribute('data-title');
      const project = currentSlide.getAttribute('data-client');
      const imageSrc = currentSlide.querySelector('img') ? currentSlide.querySelector('img').src : '';

      if (audioSrc) {
        audioPlayer.src = audioSrc;

        if (trackTitle) trackTitle.textContent = title;
        if (projectNameElement) projectNameElement.textContent = project;
        if (albumImage) albumImage.src = imageSrc;

        audioPlayer.load();
        audioPlayer.play();

        if (popupPlayer) {
          popupPlayer.classList.add('active');
          popupPlayer.classList.remove('minimized');
        }

        if (minimizeButton) {
          minimizeButton.classList.remove('minimized');
        }
      } else {
        console.log('No audio available for this slide.');
      }
    });
  }

  // Minimize the popup player
  if (minimizeButton) {
    minimizeButton.addEventListener('click', () => {
      if (popupPlayer) {
        popupPlayer.classList.toggle('minimized');
      }
      minimizeButton.classList.toggle('minimized');
    });
  }

  // Play or pause audio
  if (playPauseBtn) {
    playPauseBtn.addEventListener('click', () => {
      if (isPlaying) {
        audioPlayer.pause();
      } else {
        audioPlayer.play();
      }
    });
  }

  // Event listeners for the audio player
  audioPlayer.addEventListener('play', () => {
    isPlaying = true;
    if (playPauseBtn) {
      playPauseBtn.querySelector('.play-icon').style.display = 'none';
      playPauseBtn.querySelector('.pause-icon').style.display = 'inline';
    }
  });

  audioPlayer.addEventListener('pause', () => {
    isPlaying = false;
    if (playPauseBtn) {
      playPauseBtn.querySelector('.play-icon').style.display = 'inline';
      playPauseBtn.querySelector('.pause-icon').style.display = 'none';
    }
  });

  audioPlayer.addEventListener('timeupdate', () => {
    const currentTime = audioPlayer.currentTime;
    const duration = audioPlayer.duration;
    updateTimeDisplay(currentTime, duration);
    updateProgress(currentTime, duration);
  });

  if (progressBar) {
    progressBar.addEventListener('click', (e) => {
      const progressBarWidth = progressBar.offsetWidth;
      const clickX = e.offsetX;
      const duration = audioPlayer.duration;
      audioPlayer.currentTime = (clickX / progressBarWidth) * duration;
    });
  }

  if (volumeSlider) {
    volumeSlider.addEventListener('input', (e) => {
      audioPlayer.volume = e.target.value;
    });
  }

  function updateTimeDisplay(currentTime, duration) {
    if (currentTimeElem && totalTimeElem) {
      currentTimeElem.textContent = formatTime(currentTime);
      totalTimeElem.textContent = formatTime(duration);
    }
  }

  function updateProgress(currentTime, duration) {
    if (progress) {
      const progressPercent = (currentTime / duration) * 100;
      progress.style.width = `${progressPercent}%`;
    }
  }

  function formatTime(time) {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  }
});

